#include <iostream>
#include <vector>
using namespace std;
int m, n, minn=100000;
bool visited[1000][1000];
char graph[1000][1000];
vector <int> blob1x, blob1y, blob2x, blob2y;
bool done=false;
void photosize(int x, int y){
    int a[4] = {x, x, x+1, x-1};
    int b[4] = {y-1, y+1, y, y};
    for(int i=0; i<4; i++){
        int nx=a[i];
        int ny=b[i];
        if(nx>=0 and ny>=0 and nx<n and ny<m and graph[nx][ny]=='X' and !visited[nx][ny]){
            visited[nx][ny]=true;
            if(!done){
                blob1x.push_back(nx);
                blob1y.push_back(ny);
            }
            else{
                blob2x.push_back(nx);
                blob2y.push_back(ny);
            }
            photosize(nx, ny);
        }
    }
    return;
}
int main(){
    cin >> n >> m;
    for(int i=0; i<n; i++){
        for(int j=0; j<m; j++){
            cin >> graph[i][j];
        }
    }
    for(int i=0; i<n; i++){
        for(int j=0; j<m; j++){
            if(graph[i][j]=='X' and !visited[i][j]){
                visited[i][j]=true;
                if(!done){
                    blob1x.push_back(i);
                    blob1y.push_back(j);
                }
                else{
                    blob2x.push_back(i);
                    blob2y.push_back(j);
                }
                photosize(i,j);
                done=true;
            }
        }
    }
//    for(int i=0; i<blob1x.size(); i++){
//        cout << blob1x[i] << " " << blob1y[i] << endl;
//    }
//    cout << endl;
//    for(int i=0; i<blob2x.size(); i++){
//        cout << blob2x[i] << " " << blob2y[i] << endl;
//    }
//    cout << endl;
    for(int i=0; i<blob1x.size(); i++){
        for(int j=0; j<blob2x.size(); j++){
            int sum =abs((blob1x[i]-blob2x[j]))+abs((blob1y[i]-blob2y[j]));
            if(sum<minn){
                minn=sum;
//                cout << blob1x[i] << " " << blob2x[j] << " "  << blob1y[i] << " " << blob2y[j] << endl;
//                cout << sum << endl;
            }
        }
    }
    cout << minn-1 << endl;
    return 0;
}
